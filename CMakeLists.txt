##
# This MUST be the first line
#
cmake_minimum_required (VERSION 3.9)

##
# don't use obscure build types, but only Debug and Release
#
set (CMAKE_CONFIGURATION_TYPES Debug Release CACHE TYPE INTERNAL FORCE)
message (STATUS "Available config types: ${CMAKE_CONFIGURATION_TYPES}")

##
# make sure the user deliberately selects a  build type
#
if (NOT CMAKE_BUILD_TYPE)
    message ( WARNING "No CMAKE_BUILD_TYPE value specified, defaulting to Debug." )
    set (CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build." FORCE)
else ()
    message ( STATUS "The CMake build type is: ${CMAKE_BUILD_TYPE}" )
endif ()

##
# where supporting modules live
#
set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

##
# project name
#
project (astroid)

##
# version number
#
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
  # debug build - retrieve current project version from git
  execute_process (
    COMMAND git describe --abbrev=8 --tags --always
    OUTPUT_VARIABLE PROJECT_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
    )
else ()
  # release build - use hard-coded version string
  set ( PROJECT_VERSION "0.10.2" )
endif ()

##
# plugin API namespace and version
#
if(NOT DISABLE_PLUGINS)
  set (PLUGIN_NAMESPACE    "Astroid")
  set (PLUGIN_API_VERSION  "0.1")
endif()

##
# cmake -D...=ON|OFF command line feature switches and their default values
#
option (DISABLE_TERMINAL         "Disable embedded terminal (default = enabled)"  OFF)
option (DISABLE_EMBEDDED_EDITOR  "Disable embedded editor (default = enabled)"    OFF)
option (DISABLE_PLUGINS          "Disable plugins (default = enabled)"            OFF)

##
# welcome message
#
message (STATUS "Building ${PROJECT_NAME} ${PROJECT_VERSION}")

##
# check for required packages and libraries
#
find_package ( PkgConfig REQUIRED )
pkg_check_modules (GTKMM3     REQUIRED  gtkmm-3.0>=3.10)
pkg_check_modules (GLIBMM2    REQUIRED  glibmm-2.4)

pkg_check_modules (GMIME                gmime-3.0>=3.0.0)
if (NOT GMIME_FOUND)
  # fall back to gmime 2
  pkg_check_modules (GMIME                gmime-2.6>=2.6.0)
endif()

if (NOT GMIME_FOUND)
  message (
    FATAL_ERROR
    "Gmime 3 or Gmime 2.6 required"
    )
endif()

pkg_check_modules (WEBKITGTK3 REQUIRED  webkitgtk-3.0)
pkg_check_modules (SASS       REQUIRED  libsass)

find_package ( Threads )

find_package ( Boost REQUIRED
  COMPONENTS
  filesystem
  program_options
  log_setup
  log
  thread
  date_time
  system
  )

if(APPLE)
  # with homebrew, libtettext is keg-only, i.e. not symlinked into
  # /usr/local, and it does not provide any pkg-config infromation of
  # its own; hence we have to locate it manually
  set ( Gettext_LDFLAGS "-L/usr/local/opt/gettext/lib" )
endif(APPLE)

find_library ( NOTMUCH_LIB notmuch )
if(NOT NOTMUCH_LIB)
  message (FATAL_ERROR "notmuch library not found")
endif()

include ( CheckSymbolExists )
set ( CMAKE_REQUIRED_LIBRARIES ${NOTMUCH_LIB} )
check_symbol_exists ( notmuch_database_index_file notmuch.h NOTMUCH_INDEX_FILE_API )
if(NOTMUCH_INDEX_FILE_API)
  add_definitions ( -DHAVE_NOTMUCH_INDEX_FILE )
endif()

pkg_check_modules (VTE2 vte-2.91)
if(DISABLE_TERMINAL OR ( NOT VTE2_FOUND ))
  add_definitions ( -DDISABLE_VTE )
  if(NOT VTE2_FOUND)
    message (WARNING "Vte library not found.")
  endif()
  message (STATUS "Disabling embedded terminal.")
endif()

##
# compile flags and options
#

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")

include_directories (
  ${GTKMM3_INCLUDE_DIRS}
  ${GLIBMM2_INCLUDE_DIRS}
  ${GMIME_INCLUDE_DIRS}
  ${WEBKITGTK3_INCLUDE_DIRS}
  ${VTE2_INCLUDE_DIRS}
  ${SASS_INCLUDE_DIRS}
  ${Boost_INCLUDE_DIRS}
  )

add_compile_options (
  ${GTKMM3_CFLAGS}
  ${GLIBMM2_CFLAGS}
  ${GMIME_CFLAGS}
  ${WEBKITGTK3_CFLAGS}
  ${VTE2_CFLAGS}
  ${SASS_CFLAGS}
  )

add_compile_options (
  -Wall
  -Wextra
  )

add_definitions (
  -DBOOST_LOG_DYN_LINK
  )

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
add_compile_options (
  -g
  )
add_definitions (
  -DDEBUG
  )
endif ()

set ( GIT_DESC ${PROJECT_VERSION} )
set ( PREFIX ${CMAKE_INSTALL_PREFIX} )
configure_file (
    src/build_config.hh.in
    src/build_config.hh
    )

include (CheckIncludeFile)
set ( CMAKE_REQUIRED_INCLUDES ${SASS_INCLUDE_DIRS} )
check_include_file (sass_context.h SASSCTX_SASS_CONTEXT_H)
check_include_file (sass/context.h SASSCTX_CONTEXT_H)
if( SASSCTX_SASS_CONTEXT_H )
  add_definitions ( -DSASSCTX_SASS_CONTEXT_H )
elseif( SASSCTX_CONTEXT_H )
  add_definitions ( -DSASSCTX_CONTEXT_H )
else()
  message (
    FATAL_ERROR
    "libsass must be installed: could not find header file. You can disable libsass with --disable-libsass, however, that requires a SCSS compiler like 'sassc' which can be specified with --scss-compiler=<path to compiler>."
    )
endif()

include_directories (
  src/
  src/actions
  src/modes
  src/modes/editor
  src/modes/thread_index
  src/modes/thread_view
  src/plugin
  src/utils
  src/utils/gmime
  ${CMAKE_BINARY_DIR}/src	# needed to find the generated build_config.hh
  )

add_executable(
  astroid

  src/account_manager.cc
  src/astroid.cc
  src/chunk.cc
  src/command_bar.cc
  src/compose_message.cc
  src/config.cc
  src/crypto.cc
  src/db.cc
  src/main.cc
  src/main_window.cc
  src/message_thread.cc
  src/poll.cc

  src/modes/edit_message.cc
  src/modes/forward_message.cc
  src/modes/help_mode.cc
  src/modes/keybindings.cc
  src/modes/log_view.cc
  src/modes/mode.cc
  src/modes/paned_mode.cc
  src/modes/raw_message.cc
  src/modes/reply_message.cc
  src/modes/saved_searches.cc

  src/modes/editor/external.cc

  src/modes/thread_index/query_loader.cc
  src/modes/thread_index/thread_index.cc
  src/modes/thread_index/thread_index_list_cell_renderer.cc
  src/modes/thread_index/thread_index_list_view.cc

  src/modes/thread_view/dom_utils.cc
  src/modes/thread_view/theme.cc
  src/modes/thread_view/thread_view.cc
  src/modes/thread_view/web_inspector.cc

  src/actions/action.cc
  src/actions/action_manager.cc
  src/actions/cmdaction.cc
  src/actions/difftag_action.cc
  src/actions/onmessage.cc
  src/actions/tag_action.cc
  src/actions/toggle_action.cc

  src/utils/address.cc
  src/utils/cmd.cc
  src/utils/date_utils.cc
  src/utils/gravatar.cc
  src/utils/resource.cc
  src/utils/ustring_utils.cc
  src/utils/utils.cc
  src/utils/vector_utils.cc

  src/utils/gmime/gmime-compat.cc
  src/utils/gmime/gmime-filter-html-bq.c
  src/utils/gmime/gtrie.c
  src/utils/gmime/url-scanner.c
  )

target_link_libraries (
  astroid
  ${NOTMUCH_LIB}
  ${WEBKITGTK3_LDFLAGS}
  ${GTKMM3_LDFLAGS}
  ${GLIBMM2_LDFLAGS}
  ${GMIME_LDFLAGS}
  ${VTE2_LDFLAGS}
  ${SASS_LDFLAGS}
  ${Boost_LIBRARIES}
  ${CMAKE_THREAD_LIBS_INIT}
  ${Gettext_LDFLAGS}
  )

##
# conditional compilation based on feature switches
#

##
# embedded editor
#
if(DISABLE_EMBEDDED_EDITOR)
  add_definitions ( -DDISABLE_EMBEDDED )
  message (STATUS "Disabling embedded editor.")
else(DISABLE_EMBEDDED_EDITOR)
  if (APPLE)
    message (WARNING "Embedded editor cannot be built on macOS; disabling embedded editor.")
    add_definitions ( -DDISABLE_EMBEDDED )
  else(APPLE)
    target_sources (
      astroid
      PRIVATE
      src/modes/editor/editor.cc
      src/modes/editor/plugin.cc
      )
  endif(APPLE)
endif(DISABLE_EMBEDDED_EDITOR)

##
# plugins
#
if(DISABLE_PLUGINS)
  add_definitions ( -DDISABLE_PLUGINS )
  message (STATUS "Disabling plugins.")
else()
  if(APPLE)
    # with homebrew, libffi is keg-only, i.e. not symlinked into
    # /usr/local; hence we have to tell pkg-config where to look for
    # it
    list ( APPEND CMAKE_PREFIX_PATH /usr/local/opt/libffi )
  endif()
  include (FindGObjectIntrospection)   # this performs a pkg_check_modules()
  pkg_check_modules (PEAS libpeas-1.0>=1.0.0)
  if(INTROSPECTION_FOUND AND PEAS_FOUND)
    #
    # GObject introspection
    #
    include (GObjectIntrospectionMacros)
    set (GIR_NAME "${PLUGIN_NAMESPACE}-${PLUGIN_API_VERSION}.gir")
    set (${GIR_NAME}_NAMESPACE      ${PLUGIN_NAMESPACE})
    set (${GIR_NAME}_VERSION        ${PLUGIN_API_VERSION})
    set (${GIR_NAME}_INCLUDEPKGS    GObject-2.0 GMime-3.0)
    set (${GIR_NAME}_PROGRAM        ${CMAKE_CURRENT_BINARY_DIR}/gir_main)
    set (${GIR_NAME}_FILES
      src/plugin/astroid_activatable.c
      src/plugin/thread_view_activatable.c
      src/plugin/thread_index_activatable.c
      src/plugin/astroid_activatable.h
      src/plugin/thread_view_activatable.h
      src/plugin/thread_index_activatable.h
      src/plugin/gir_main.c
      )
    list ( APPEND INTROSPECTION_GIRS ${GIR_NAME} )
    set (INTROSPECTION_SCANNER_ARGS --warn-all)
    gir_add_introspections (INTROSPECTION_GIRS)   # magic happens here
    #
    # additional source files for astroid (plugin framework)
    #
    target_sources (
      astroid
      PRIVATE
      src/plugin/astroid_activatable.c
      src/plugin/manager.cc
      src/plugin/thread_index_activatable.c
      src/plugin/thread_view_activatable.c
      )
    #
    # link astroid against libpeas
    #
    if(APPLE)
      # with homebrew, libffi is keg-only, i.e. not symlinked into
      # /usr/local; hence we have to tell the compiler where to look
      # for header files
      include_directories ( ${PEAS_INCLUDE_DIRS} )
    endif(APPLE)
    target_link_libraries (
      astroid
      ${PEAS_LDFLAGS}
      )
    #
    # build gir_main executable for introspection
    #
    add_executable (
      gir_main
      ${${GIR_NAME}_FILES}
      )
    target_link_libraries (
      gir_main
      ${WEBKITGTK3_LDFLAGS}
      ${GTKMM3_LDFLAGS}
      ${PEAS_LDFLAGS}
      ${INTROSPECTION_LIBS}
      ${Gettext_LDFAGS}
      )
    #
    # depenedecies for proper build order
    #
    add_dependencies ( gir-typelibs gir_main )
    add_dependencies ( astroid  gir-typelibs )
  else(INTROSPECTION_FOUND AND PEAS_FOUND)
    add_definitions ( -DDISABLE_PLUGINS )
    message (WARNING "Required packages not found; disabling plugins.")
  endif(INTROSPECTION_FOUND AND PEAS_FOUND)
endif(DISABLE_PLUGINS)
